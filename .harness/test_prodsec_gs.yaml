pipeline:
  name: test_prodsec_gs
  identifier: test_prodsec_gs
  projectIdentifier: Security_Test_Scans
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: Semgrep Scan - Multiple repos
        identifier: Semgrep_Scan_Multiple_repos
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Semgrep_Scan
                  identifier: Semgrep_Scan
                  spec:
                    shell: Bash
                    executionTarget: {}
                    source:
                      type: Inline
                      spec:
                        script: |
                          #!/bin/bash

                          # Step 1: Install Python and Pip using microdnf
                          echo "Installing Python and Pip using microdnf..."
                          microdnf install -y python39 python39-pip git jq
                          microdnf clean all

                          # Step 2: Install Semgrep using pip
                          echo "Installing Semgrep..."
                          pip3 install semgrep

                          # Step 3: Verify Semgrep installation
                          echo "Verifying Semgrep installation..."
                          semgrep --version

                          # Step 4: Update Semgrep rules
                          echo "Updating Semgrep rules..."
                          semgrep update

                          # Step 5: Clone the repository containing the orgs_repos.txt file
                          echo "Cloning the repository containing orgs_repos.txt..."
                          git clone https://github.com/gunwantsingh-harness/test_app.git
                          cd test_app || exit 1

                          # Step 6: Read and parse the orgs_repos.txt file
                          declare -A orgs_and_repos
                          while IFS=: read -r org repos; do
                              # Skip empty lines or lines starting with #
                              [[ -z "$org" || "$org" =~ ^# ]] && continue

                              # Remove leading/trailing whitespaces and commas
                              org=$(echo "$org" | xargs)
                              repos=$(echo "$repos" | xargs | sed 's/,/ /g')

                              # Add to associative array
                              orgs_and_repos["$org"]="$repos"
                          done < orgs_repos.txt

                          # Step 7: Function to clone the default branch, print the default branch, run Semgrep, and print results summary
                          scan_repo() {
                              local org=$1
                              local repo=$2

                              echo "Scanning repo: ${org}/${repo}"

                              # Clone the repository
                              git clone https://github.com/${org}/${repo}.git
                              if [ $? -ne 0 ]; then
                                  echo "Failed to clone repository ${org}/${repo}. Skipping."
                                  return 1
                              fi

                              cd ${repo} || exit 1

                              # List contents of the cloned repo
                              echo "Contents of ${repo}:"
                              ls

                              # Fetch the default branch
                              default_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

                              # Print the default branch
                              echo "Default branch for ${repo} is ${default_branch}"

                              # Checkout the default branch
                              git checkout $default_branch

                              # Run Semgrep on the default branch and store results in SARIF format
                              result_file="../${repo}_results.sarif"
                              semgrep ci --config auto --sarif -o $result_file

                              # Print the SARIF results file path
                              echo "Completed scanning ${repo}. Results stored in ${result_file}"

                              # Print highlighted summary of the scan
                              if [ -f "$result_file" ]; then
                                  issues_count=$(jq '.runs[0].results | length' $result_file)
                                  echo "Summary for ${repo}:"
                                  echo -e "\033[1;31mTotal issues found: $issues_count\033[0m"  # Highlight in red

                                  if [ "$issues_count" -gt 0 ]; then
                                      jq -r '.runs[0].results[] | "\033[1;33mRule: \(.ruleId), Severity: \(.level), Message: \(.message.text)\033[0m"' $result_file
                                  fi
                              else
                                  echo "No results file generated for ${repo}"
                              fi

                              # Move back to the parent directory and clean up
                              cd ..
                              echo "Cleaning up cloned repo: ${repo}"
                              rm -rf ${repo}

                              # List all the cloned repositories after each scan
                              echo "Listing all cloned repositories and results:"
                              ls
                          }

                          # Step 8: Track total results across all repositories
                          total_issues=0

                          # Step 9: Loop through each org and its repos
                          for org in "${!orgs_and_repos[@]}"; do
                              repos=${orgs_and_repos[$org]}
                              for repo in $repos; do
                                  scan_repo $org $repo
                                  repo_issues=$(jq '.runs[0].results | length' ../${repo}_results.sarif 2>/dev/null || echo 0)
                                  total_issues=$((total_issues + repo_issues))
                              done
                          done

                          # Step 10: Final summary of all repositories
                          echo -e "\033[1;32mFinal summary of all scanned repositories:\033[0m"
                          echo "Total issues across all repositories: $total_issues"
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
        tags: {}
